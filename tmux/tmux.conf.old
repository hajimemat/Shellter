# =============================================
# TMUXの設定
# =============================================
#
# 基本設定
# ---------------------------------------------

# スクリーンモードの規定
set -g default-terminal "screen-256color"

#
# # Escapeのタイムラグj
set -s escape-time 0

# スクロールバッファ
set -g history-limit 10000

# ウィンドウとペインの番号を1から開始する（デフォルト0）
set-option -g base-index 1
set-window-option -g pane-base-index 1

# キーマップ
# ---------------------------------------------
#
# TMUX設定開発時に有効にするとよい
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# bind-key r source-file ~/.tmux.conf \; display-message "config reloaded".
#
#
# プレフィックス
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# キーバインドを解除
unbind C-b
# 新しいキーバインドを設定
set-option -g prefix C-a
# エスケープ処理
bind C-a send-prefix


# コピーペーストモード
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# 選択中の移動をvi風のキーマップにする
setw -g mode-keys vi

# コピーは[ではなくyで開始
unbind [
bind y copy-mode

# ペーストは[ではなくpで実行
unbind p
bind p paste-buffer

# vで選択開始
bind-key -T copy-mode-vi 'v' send -X begin-selection

# yで選択領域をコピー
bind-key -T copy-mode-vi 'y' send -X copy-selection

bind-key "'" choose-session

# 同期
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
bind b set-window-option synchronize-panes on \; display-message 'Syncronize On'
bind B set-window-option synchronize-panes off \; display-message 'Syncronize Off'

# bind s split-window -v
# bind v split-window -h
#
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R
#
# bind -r C-h resize-pane -L
# bind -r C-j resize-pane -D
# bind -r C-k resize-pane -U
# bind -r C-l resize-pane -R


# Prefix+- で横に、Prefix+| で縦に分割（ペイン）する
bind-key s split-window -h
bind-key v split-window -v

# Prefix + Ctrl-h/l でウィンドウ切り替え
# Prefix + Ctrl-h,h,h,h,...と連打できる
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# Prefix+hjkl でペイン移動
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# ペインサイズを上下左右（Prefix+JKHL）に変更
# Prefix+J,J,J,J,...と連打してリサイズ可能
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

bind-key m set-option -g mouse \; display-message 'Mouse: On'
bind-key M set-option -g mouse \; display-message 'Mouse: Off'

bind -n M-c new-window -c "#{pane_current_path}"
bind -n M-C new-session -c "#{pane_current_path}"
bind -n M-l switch-client -n
bind -n M-h switch-client -p

# set -g status-bg black
# set -g status-fg white
# set -g status-left '#[fg=green]#H'
# set -g status-right '#[fg=yellow]#(uptime | cut -d ":" -f -2)'
# set-option -g status-right "#[fg=black][%Y/%m/%d %H:%M:%S]"
# set-window-option -g window-status-current-format " #[fg=colour255, bg=colour27]#I #W#F"



# bind -n M-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n M-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n M-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n M-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
# bind -n M-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l" 
#
# bind -n M-Enter new-window
# bind -n M-q kill-window
# bind -n M-o next-layout
# bind -n M-f resize-pane -Z
# bind -n M-J swap-pane -D
# bind -n M-K swap-pane -U
# bind -n M-H join-pane -t:+
# bind -n M-L join-pane -t:-
# bind -n M-B break-pane
#
# bind -n M-F11 set -qg status-bg black
# bind -n M-F12 set -qg status-bg colour24

# bind -n M-up \
#     set -qg prefix C-b \; \
#     send-keys M-F12 \; \
#     set -qg status-bg black \; \
#     set -qg status-fg colour24 \; \
#     unbind -n M-h \; \
#     unbind -n M-j \; \
#     unbind -n M-k \; \
#     unbind -n M-l \; \
#     unbind -n M-\ \; \
#     unbind -n M-Enter \; \
#     unbind -n M-q \; \
#     unbind -n M-o \; \
#     unbind -n M-f \; \
#     unbind -n M-J \; \
#     unbind -n M-K \; \
#     unbind -n M-H \; \
#     unbind -n M-L
#
# bind -n M-down \
#     set -qg prefix C-a \; \
#     send-keys M-F11 \; \
#     set -qg status-bg colour24 \; \
#     set -qg status-fg black \; \
#     bind -n M-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
#     bind -n M-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
#     bind -n M-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
#     bind -n M-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
#     bind -n M-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"
#     bind -n M-Enter new-window \; \
#     bind -n M-q kill-window \; \
#     bind -n M-o next-layout \; \
#     bind -n M-f resize-pane -Z \; \
#     bind -n M-J swap-pane -D \; \
#     bind -n M-K swap-pane -U \; \
#     bind -n M-H join-pane -t:+ \; \
#     bind -n M-L join-pane -t:- 
# ショウくん
bind -r F resize-pane -Z


# デザイン
# ---------------------------------------------
# mark this tmux as inactive (for ceding control to inner tmux when nested)
bind-key S-Up\
  set-option -g prefix C-b\;\
  set-option -g status-style "fg=colour246,bg=colour240,bold"\;\
  set-option -g message-command-style "fg=colour246,bg=colour240"\;\
  set-option -g mode-style "fg=colour246,bg=colour240"\;\
  set-option -g message-style "fg=colour0,bg=colour246"\;\
  set-option -g pane-active-border-style "fg=colour240"\;\
  send-keys C-a M-F12

# re-activate this tmux (for retaking control from inner tmux when nested)
bind-key S-Down\
  set-option -g prefix C-a\;\
  set-option -g status-style "fg=colour45,bg=colour24,bold"\;\
  set-option -g message-command-style "fg=colour45,bg=colour24"\;\
  set-option -g mode-style "fg=colour45,bg=colour24"\;\
  set-option -g message-style "fg=colour0,bg=colour45"\;\
  set-option -g pane-active-border-style "fg=colour24"\;\
  send-keys C-a M-F11
 
# used by S-Down; do not use directly.
bind-key M-F11\
  set-option -g status-style "fg=colour246,bg=colour240,bold"\;\
  set-option -g message-command-style "fg=colour246,bg=colour240"\;\
  set-option -g mode-style "fg=colour246,bg=colour240"\;\
  set-option -g message-style "fg=colour0,bg=colour246"\;\
  set-option -g pane-active-border-style "fg=colour240"

# used by S-Up; do not use directly.
bind-key M-F12\
  set-option -g status-style "fg=colour45,bg=colour24,bold"\;\
  set-option -g message-command-style "fg=colour45,bg=colour24"\;\
  set-option -g mode-style "fg=colour45,bg=colour24"\;\
  set-option -g message-style "fg=colour0,bg=colour45"\;\
  set-option -g pane-active-border-style "fg=colour25"
# ステータスバーをトップに配置する
set-option -g status-position top

# 左右のステータスバーの長さを決定する
set-option -g status-left-length 90
set-option -g status-right-length 90

# #H => マシン名
# #P => ペイン番号
# 最左に表示
set-option -g status-left '#H:[#P]'

# Wi-Fi、バッテリー残量、現在時刻
# 最右に表示
set-option -g status-right '#[%Y-%m-%d(%a) %H:%M]'

# ステータスバーを Utf-8 に対応
#set-option -g status-utf8 on

# ステータスバーを1秒毎に描画し直す
set-option -g status-interval 1

# センタライズ（主にウィンドウ番号など）
set-option -g status-justify centre

# 色設定
# ---------------------------------------------

# default statusbar colors
set-option -g status-bg black #base02
set-option -g status-fg yellow #yellow


#set-option -g status-attr default

# default window title colors
#set-window-option -g window-status-fg brightblue #base0
#set-window-option -g window-status-bg default
#set-window-option -g window-status-attr dim

# active window title colors
#set-window-option -g window-status-current-fg brightred #orange
#set-window-option -g window-status-current-bg default
#set-window-option -g window-status-current-attr bright

# pane border
#set-option -g pane-border-fg black #base02
#set-option -g pane-active-border-fg brightgreen #base01

# message text
#set-option -g message-bg black #base02
#set-option -g message-fg brightred #orange

# pane number display
set-option -g display-panes-active-colour blue #blue
set-option -g display-panes-colour brightred #orange

# clock
set-window-option -g clock-mode-colour green #green

# bell
set-window-option -g window-status-bell-style fg=black,bg=red #base02, red

# プラグイン
# -----------------------------------------------

set -g @tpm_plugins '          \
tmux-plugins/tmux-sensible     \
tmux-plugins/tmux-resurrect    \
tmux-plugins/tmux-continuum    \
tmux-plugins/tmux-pain-control \
tmux-plugins/tmux-cpu          \
'

# continuumの設定
set -g @continuum-save-interval '60'
set -g @continuum-restore 'on'

set -g @resurrect-strategy-vim 'session'
set -g @resurrect-processes 'mysql ssh php'

# ステータスラインの設定
# ---------------------------------------------
set -g status-left '#{?pane_synchronized,#[bg=red],}[#S]'


set -g status-right '#{cpu_bg_color} CPU: #{cpu_icon} #{cpu_percentage} | %a %h-%d %H:%M '
set -g @cpu_low_icon "ᚋ"
set -g @cpu_medium_icon "ᚌ"
set -g @cpu_high_icon "ᚍ"

set -g @cpu_low_fg_color "#[fg=#00ff00]"
set -g @cpu_medium_fg_color "#[fg=#ffff00]"
set -g @cpu_high_fg_color "#[fg=#ff0000]"

set -g @cpu_low_bg_color "#[bg=#00ff00]"
set -g @cpu_medium_bg_color "#[bg=#ffff00]"
set -g @cpu_high_bg_color "#[bg=#ff0000]"

set-option -g status-style "fg=colour45,bg=colour24,bold"
set-option -g message-command-style "fg=colour45,bg=colour24"
set-option -g mode-style "fg=colour45,bg=colour24"
set-option -g message-style "fg=colour0,bg=colour45"
set-option -g pane-border-style "fg=colour240"
set-option -g pane-active-border-style "fg=colour24"

set-option -g status-left\
  "#{?client_prefix,C-a ,}#{?pane_in_mode,[tmux],#H:#S[#P]:#(cd #{pane_current_path} &&\
    if hg status 1>&2 2>/dev/null; then\
      echo \"($(hg book | grep \"^\\s\\*\" | cut -d' ' -f 3)) \";\
    elif git status 1>&2 2>/dev/null; then\
      echo \"($(git branch | grep \"^\\*\\s\" | cut -d' ' -f 2)) \";\
    fi;\
  )[#(echo #{pane_current_path} | sed \"\s?$HOME?~?1\")]}"
set-option -g status-left-length 60
set-option -g status-right-length 20
set-option -g status-right " %H:%M %d-%b-%y "
set-option -g status-justify right

# 最終処理
# ---------------------------------------------
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.shellter/var/tmux/plugins/'
run -b '~/.shellter/var/tmux/plugins/tpm/tpm'
